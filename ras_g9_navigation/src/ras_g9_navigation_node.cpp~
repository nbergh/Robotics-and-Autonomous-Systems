#include <ros/ros.h>
#include <nav_msgs/Odometry.h>
#include <geometry_msgs/PoseStamped.h>
#include <sensor_msgs/LaserScan.h>
#include <math.h>
#include <iostream>

#define CONTROLLER_UPDATE_RATE 10

class Callback_class {
private:
	sensor_msgs::LaserScan laser_scan_msg;
	double pos_x_robot, pos_y_robot, orientation_z_robot;
	double pos_x_goal, pos_y_goal;
	bool new_goal_set;
	
public:
	Callback_class() :
		pos_x_robot(0),
		pos_y_robot(0),
		orientation_z_robot(0),
		pos_x_goal(0),
		pos_y_goal(0),
		new_goal_set(0)
			{}

	void goal_callback(const geometry_msgs::PoseStamped::ConstPtr& msg) {
		new_goal_set = true;
		pos_x_goal = (*msg).pose.position.x;
		pos_y_goal = (*msg).pose.position.y;
	}

	void laser_scan_callback(const sensor_msgs::LaserScan::ConstPtr& msg) {
		laser_scan_msg = (*msg);
	}

	void odometry_callback(const nav_msgs::Odometry::ConstPtr& msg) {
		double siny = + 2.0 * ((*msg).pose.pose.orientation.w * (*msg).pose.pose.orientation.z + (*msg).pose.pose.orientation.x * (*msg).pose.pose.orientation.y);
		double cosy = + 1.0 - 2.0 * ((*msg).pose.pose.orientation.y * (*msg).pose.pose.orientation.y + (*msg).pose.pose.orientation.z * (*msg).pose.pose.orientation.z);  
		orientation_z_robot = std::atan2(siny, cosy);

		pos_x_robot = (*msg).pose.pose.position.x;
		pos_y_robot = (*msg).pose.pose.position.y;
	}

	sensor_msgs::LaserScan& get_laser_scan() {
		return laser_scan_msg;
	}

	void reset_goal() {
		new_goal_set = false;
		pos_x_goal = 0;
		pos_y_goal = 0;
	}
		
	void get_goal(bool& new_goal_set_arg, double& pos_x_goal_arg, double& pos_y_goal_arg) {
		new_goal_set_arg = new_goal_set;
		pos_x_goal_arg = pos_x_goal;
		pos_y_goal_arg = pos_y_goal;
	}

	void get_position(double& pos_x_robot_arg, double& pos_y_robot_arg, double& orientation_z_robot_arg) {
		orientation_z_robot_arg = orientation_z_robot;
		pos_x_robot_arg = pos_x_robot;
		pos_y_robot_arg = pos_y_robot;
	}

};

bool stop_for_obstacle(sensor_msgs::LaserScan laser_scan) {
	bool stop_for_obstacle_bool = false;
	
	int nr_of_points = (int) ((laser_scan.angle_max - laser_scan.angle_min) / laser_scan.angle_increment);
	double obstacle_angle_min = -M_PI/15, obstacle_angle_max = M_PI/15, obstacle_distance = 0.2;

	obstacle_angle_max += M_PI/2;
	obstacle_angle_min += M_PI/2;

	// Print laser scan data
	/*
	std::cout << std::endl
			<< "Laser scan data: " << std::endl
			<< "Min range: " << laser_scan.range_min << std::endl
			<< "Max range: " << laser_scan.range_max << std::endl
			<< "Min angle: " << laser_scan.angle_min << std::endl
			<< "Max angle: " << laser_scan.angle_max << std::endl
			<< "Angle increment: " << laser_scan.angle_increment << std::endl
			<< "Number of points: " << nr_of_points << std::endl
			<< "Obstacle angle min: " << obstacle_angle_min << std::endl
			<< "Obstacle angle max: " << obstacle_angle_max << std::endl;
	*/

	double current_angle = laser_scan.angle_min;
	for (int i=0;i<nr_of_points;i++) {		
		
		if (current_angle > obstacle_angle_min && current_angle < obstacle_angle_max) {
			//std::cout << "Range point " << current_angle <<": " << laser_scan.ranges[i] << std::endl;

			if (laser_scan.ranges[i] < laser_scan.range_max && laser_scan.ranges[i] > laser_scan.range_min && laser_scan.ranges[i] < obstacle_distance) {					
				stop_for_obstacle_bool = true;
			}
		}
		
		current_angle += laser_scan.angle_increment;
	}
	
	return stop_for_obstacle_bool;
}


int main(int argc, char **argv) {
	ros::init(argc, argv, "ras_g9_navigation_node");

	ros::NodeHandle n;

	Callback_class callback_object;

	// Create subscribers and publishers:	

	ros::Subscriber goal_sub = n.subscribe("/move_base_simple/goal",1,&Callback_class::goal_callback,&callback_object);
	ros::Subscriber odometry_sub = n.subscribe("/odom",1,&Callback_class::odometry_callback,&callback_object);
    ros::Subscriber laser_scan_sub = n.subscribe("/scan",1,&Callback_class::laser_scan_callback,&callback_object);

	ros::Publisher cmd_vel_pub = n.advertise<geometry_msgs::Twist>("/cmd_vel",1);

    double pos_x_robot = 0, pos_y_robot = 0, orientation_z_robot = 0, pos_x_goal = 0, pos_y_goal = 0, path_orientation = 0, pos_x_start = 0, pos_y_start = 0, orientation_error = 0, lateral_error = 0;
	bool new_goal_set = false, following_path = false, stop_for_obstacle_bool = false;

	ros::Rate r(CONTROLLER_UPDATE_RATE);
	while(n.ok()) {
		ros::spinOnce(); // Check for incoming messages
		
		callback_object.get_position(pos_x_robot, pos_y_robot,orientation_z_robot);
		callback_object.get_goal(new_goal_set,pos_x_goal,pos_y_goal);
		if (new_goal_set && !following_path) {
			following_path = true;
			pos_x_start = pos_x_robot;
			pos_y_start = pos_y_robot;
			double dx = pos_x_goal - pos_x_start, dy = pos_y_goal - pos_y_start;

			path_orientation = std::atan(dy / dx);
			if (dx < 0 && dy > 0) {path_orientation += M_PI;}
			if (dx < 0 && dy < 0) {path_orientation -= M_PI;}
		}
		
		if (following_path) {			
			orientation_error = path_orientation - orientation_z_robot;
			if (orientation_error > M_PI) {orientation_error -= 2*M_PI;}
			if (orientation_error < -M_PI) {orientation_error += 2*M_PI;}

			double pos_x_robot_rotated = (pos_x_robot-pos_x_start) * std::cos(path_orientation) + (pos_y_robot-pos_y_start) * std::sin(path_orientation);
			double pos_y_robot_rotated = -(pos_x_robot-pos_x_start) * std::sin(path_orientation) + (pos_y_robot-pos_y_start) * std::cos(path_orientation);
			double pos_x_goal_rotated = (pos_x_goal-pos_x_start) * std::cos(path_orientation) + (pos_y_goal-pos_y_start) * std::sin(path_orientation);
		
			lateral_error = 0 - pos_y_robot_rotated;
			
			double cmd_vel_orientation = 5 * lateral_error + 2 * orientation_error;
			
			geometry_msgs::Twist cmd_vel_msg;
			cmd_vel_msg.linear.x = 0.4;
			cmd_vel_msg.linear.y = 0;
			cmd_vel_msg.linear.z = 0;
			cmd_vel_msg.angular.x = 0;
			cmd_vel_msg.angular.y = 0;
			cmd_vel_msg.angular.z = cmd_vel_orientation;

			// Print data:
			std::cout 	<< std::endl
						<< "New goal set: " << new_goal_set << std::endl
						<< "Following path: " << following_path << std::endl
						<< "Stopped for obstacle: " << stop_for_obstacle_bool << std::endl
						<< "Robot position x: " << pos_x_robot << std::endl
						<< "Robot position y: " << pos_y_robot << std::endl
						<< "Robot orientation z: " << orientation_z_robot << std::endl
						<< "Path x start: " << pos_x_start << std::endl
						<< "Path y start: " << pos_y_start << std::endl
						<< "Path x goal: " << pos_x_goal << std::endl
						<< "Path y goal: " << pos_y_goal << std::endl
						<< "Path orientation " << path_orientation << std::endl
						<< "Orientation error: " << orientation_error << std::endl
						<< "Lateral error: " << lateral_error << std::endl;			
			
			if ((std::abs(pos_x_robot - pos_x_goal) < 0.05) && (std::abs(pos_y_robot - pos_y_goal) < 0.05)) {
				// Goal reached
				std::cout 	<< std::endl 
							<< "Goal reached" << std::endl
							<< "Distance from goal x: " << pos_x_goal - pos_x_robot << std::endl
							<< "Distance from goal y: " << pos_y_goal - pos_y_robot << std::endl;
						
				callback_object.reset_goal();
				new_goal_set = false;
				following_path = false;		
				cmd_vel_msg.linear.x = 0;
				cmd_vel_msg.angular.z = 0;		
			} else if (pos_x_robot_rotated > pos_x_goal_rotated) {
				// Goal overshot
				std::cout 	<< std::endl 
							<< "Goal overshot" << std::endl
							<< "Distance from goal x: " << pos_x_goal - pos_x_robot << std::endl
							<< "Distance from goal y: " << pos_y_goal - pos_y_robot << std::endl;
						
				callback_object.reset_goal();
				new_goal_set = false;
				following_path = false;		
				cmd_vel_msg.linear.x = 0;
				cmd_vel_msg.angular.z = 0;		
			}

			// Check for obstacles:
			stop_for_obstacle_bool = stop_for_obstacle(callback_object.get_laser_scan());
			if (stop_for_obstacle_bool) {
				cmd_vel_msg.linear.x = 0;
				cmd_vel_msg.angular.z = 0;			
			}

			cmd_vel_pub.publish(cmd_vel_msg);		
		}	

		r.sleep();
	}
}



















